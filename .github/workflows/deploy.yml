name: Frontend CI/CD Pipeline
on:
  push:
    branches:
      - main
      - develop
      - prod
  pull_request:
    branches:
      - main
      - prod

jobs:
  # 🧪 JOB 1: Tests and Quality code
  test-and-quality:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: 🎨 Check Prettier formatting
        run: npm run format:check
        continue-on-error: false

      - name: 🧪 Run unit tests
        run: npm run test:run
        env:
          CI: true

      - name: 📊 Generate coverage report
        run: npm run test:coverage
        continue-on-error: true

      - name: 🔒 Security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: 🏗️ Test build
        run: npm run build
        env:
          VITE_RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}

  # 🏗️ JOB 2: Build for deployment
  build-for-deploy:
    needs: test-and-quality
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Debug environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"

      - name: 🏗️ Build project
        run: npm run build
        env:
          VITE_RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}
          NODE_ENV: production

      - name: 🔍 Verify build output
        run: |
          echo "📂 Build directory contents:"
          ls -la dist/

          echo "📊 Build size analysis:"
          du -sh dist/
          find dist/ -name "*.js" -exec du -h {} \; | sort -hr | head -5
          find dist/ -name "*.css" -exec du -h {} \; | sort -hr | head -3

          # Vérifications critiques
          test -f dist/index.html || (echo "❌ index.html missing" && exit 1)
          test -d dist/assets || (echo "❌ assets directory missing" && exit 1)

          echo "✅ Build verification successful"

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/
          retention-days: 1
          compression-level: 6
          if-no-files-found: error

  # 🚀 JOB 3: Deployment with optimized caching
  deploy:
    needs: build-for-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/

      - name: 🔍 Verify downloaded artifacts
        run: |
          echo "📂 Downloaded artifacts:"
          ls -la dist/

          echo "📊 Assets breakdown:"
          if [ -d "dist/assets" ]; then
            echo "Assets directory contents:"
            ls -la dist/assets/
          else
            echo "❌ No assets directory found!"
            exit 1
          fi

      - name: 🚀 Deploy static assets with long cache to S3
        run: |
          echo "🎯 Deploying assets (JS, CSS, images) with 1 year cache..."
          aws s3 sync dist/assets/ s3://${{ secrets.S3_BUCKET_NAME }}/assets/ \
            --cache-control "public, max-age=31536000, immutable" \
            --delete \
            --region eu-west-3 \
            --exclude "*.map"
          echo "✅ Assets deployed with long-term cache"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 🚀 Deploy HTML and other files with short cache to S3
        run: |
          echo "📄 Deploying HTML and other files with 5 minutes cache..."
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }}/ \
            --exclude "assets/*" \
            --exclude "*.map" \
            --cache-control "public, max-age=300" \
            --delete \
            --region eu-west-3
          echo "✅ HTML and other files deployed with short-term cache"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 🔍 Verify S3 deployment
        run: |
          echo "🔍 Verifying deployment..."
          aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}/ --recursive --human-readable --summarize | tail -10
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ♻️ Invalidate CloudFront cache
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: '/*'
          AWS_REGION: eu-west-3
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ✅ Deployment success
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🌐 Application deployed to S3 with optimized caching:"
          echo "   📦 Assets (JS/CSS/Images): 1 year cache (immutable)"
          echo "   📄 HTML files: 5 minutes cache"
          echo "♻️ CloudFront cache invalidated"

      - name: 🧹 Cleanup artifacts
        uses: actions/github-script@v7
        with:
          script: |
            // Supprimer l'artifact après déploiement réussi
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name === 'build-files-${{ github.sha }}') {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`🧹 Deleted artifact: ${artifact.name}`);
              }
            }

  # 🔄 JOB 4: Post-deployment verification
  verify-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
    steps:
      - name: 🏥 Health check
        run: |
          echo "🔍 Performing post-deployment checks..."

          # Test basique de connectivité
          if curl -f -s -o /dev/null https://wonderbook.net; then
            echo "✅ Site accessible"
          else
            echo "❌ Site not accessible"
            exit 1
          fi

      - name: 🔍 Verify cache headers
        run: |
          echo "🔍 Testing cache headers..."

          # Test d'un asset JS
          ASSET_RESPONSE=$(curl -I -s https://wonderbook.net/assets/js/ | head -n 20)
          echo "📦 Asset headers sample:"
          echo "$ASSET_RESPONSE"

          # Test de l'index.html
          HTML_RESPONSE=$(curl -I -s https://wonderbook.net/ | head -n 20)
          echo "📄 HTML headers:"
          echo "$HTML_RESPONSE"

          echo "✅ Post-deployment verification completed!"
