name: Frontend CI/CD Pipeline
on:
  push:
    branches:
      - main
      - develop
      - prod
  pull_request:
    branches:
      - main
      - prod

jobs:
  # üß™ JOB 1: Tests and Quality code
  test-and-quality:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          # Important: permet de push les changements
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      # ‚ú® NOUVEAU: Auto-format avec Prettier
      - name: üé® Auto-format code with Prettier
        id: prettier-format
        run: |
          echo "üîß Application du formatage Prettier..."
          npm run format
          
          # V√©rifier s'il y a des changements
          if git diff --quiet; then
            echo "‚úÖ Aucun changement de formatage n√©cessaire"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "üìù Fichiers format√©s automatiquement"
            echo "changed=true" >> $GITHUB_OUTPUT
            git diff --name-only
          fi

      - name: üíæ Commit formatting changes
        if: steps.prettier-format.outputs.changed == 'true' && github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "üé® Auto-format code with Prettier [skip ci]"
          git push
          echo "‚úÖ Changements de formatage committ√©"

      - name: üîç Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: üß™ Run unit tests
        run: npm run test:run
        env:
          CI: true

      - name: üìä Generate coverage report
        run: npm run test:coverage
        continue-on-error: true

      - name: üîí Security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: üèóÔ∏è Test build
        run: npm run build
        env:
          VITE_RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}

      - name: ‚úÖ Tests Summary
        run: |
          echo "üéâ Tests r√©ussis: Tous les tests passent!"
          echo "‚úÖ Build de test r√©ussi"
          echo "‚úÖ ESLint valid√©"
          if [ "${{ steps.prettier-format.outputs.changed }}" == "true" ]; then
            echo "üé® Code automatiquement format√©"
          fi

  # üèóÔ∏è JOB 2: Build for deployment
  build-for-deploy:
    needs: test-and-quality
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üîç Debug environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"

      - name: üèóÔ∏è Build project
        run: npm run build
        env:
          VITE_RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}
          NODE_ENV: production

      - name: üîç Verify build output
        run: |
          echo "üìÇ Build directory contents:"
          ls -la dist/

          echo "üìä Build size analysis:"
          du -sh dist/
          find dist/ -name "*.js" -exec du -h {} \; | sort -hr | head -5
          find dist/ -name "*.css" -exec du -h {} \; | sort -hr | head -3

          # V√©rifications critiques
          test -f dist/index.html || (echo "‚ùå index.html missing" && exit 1)
          test -d dist/assets || (echo "‚ùå assets directory missing" && exit 1)

          echo "‚úÖ Build verification successful"

      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/
          retention-days: 1
          compression-level: 6
          if-no-files-found: error

  # üöÄ JOB 3: Deployment with optimized caching and MIME types
  deploy:
    needs: build-for-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
    steps:
      - name: üì• Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/

      - name: üîç Verify downloaded artifacts
        run: |
          echo "üìÇ Downloaded artifacts:"
          ls -la dist/

          echo "üìä Assets breakdown:"
          if [ -d "dist/assets" ]; then
            echo "Assets directory contents:"
            ls -la dist/assets/
            ls -la dist/assets/js/ 2>/dev/null || echo "No JS folder"
          else
            echo "‚ùå No assets directory found!"
            exit 1
          fi

      - name: üöÄ Deploy all assets to S3 first
        run: |
          echo "üì¶ Deploying all assets to S3..."
          aws s3 sync dist/assets/ s3://${{ secrets.S3_BUCKET_NAME }}/assets/ \
            --cache-control "public, max-age=31536000, immutable" \
            --delete \
            --region eu-west-3 \
            --exclude "*.map"
          echo "‚úÖ Assets deployed"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: üîß Fix MIME types for JavaScript files
        run: |
          echo "üîß Fixing MIME types for JavaScript files..."
          aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/assets/js/ s3://${{ secrets.S3_BUCKET_NAME }}/assets/js/ \
            --recursive \
            --metadata-directive REPLACE \
            --content-type "application/javascript" \
            --cache-control "public, max-age=31536000, immutable" \
            --region eu-west-3
          echo "‚úÖ JavaScript MIME types fixed"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: üîß Fix MIME types for CSS files
        run: |
          echo "üîß Fixing MIME types for CSS files..."
          aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/assets/ s3://${{ secrets.S3_BUCKET_NAME }}/assets/ \
            --recursive \
            --metadata-directive REPLACE \
            --content-type "text/css" \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*" \
            --include "*.css" \
            --region eu-west-3
          echo "‚úÖ CSS MIME types fixed"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: üìÑ Deploy HTML and other files with short cache
        run: |
          echo "üìÑ Deploying HTML and other files with 5 minutes cache..."
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }}/ \
            --exclude "assets/*" \
            --exclude "*.map" \
            --content-type "text/html" \
            --cache-control "public, max-age=300" \
            --delete \
            --region eu-west-3
          echo "‚úÖ HTML and other files deployed"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: üîç Verify S3 deployment and MIME types
        run: |
          echo "üîç Verifying deployment..."
          aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}/ --recursive --human-readable --summarize | tail -10

          echo "üîç Checking specific files existence..."
          # V√©rifier l'existence des fichiers cl√©s
          if aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}/assets/index-3mRPG_9E.css; then
            echo "‚úÖ CSS file exists"
            aws s3api head-object --bucket ${{ secrets.S3_BUCKET_NAME }} --key assets/index-3mRPG_9E.css | grep ContentType || echo "No ContentType found"
          else
            echo "‚ùå CSS file NOT found on S3"
          fi

          if aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}/assets/js/index-D5OH-pp8.js; then
            echo "‚úÖ JS file exists"
            aws s3api head-object --bucket ${{ secrets.S3_BUCKET_NAME }} --key assets/js/index-D5OH-pp8.js | grep ContentType || echo "No ContentType found"
          else
            echo "‚ùå JS file NOT found on S3"
          fi

          echo "üìã Listing all JS files in bucket:"
          aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}/assets/js/ || echo "No JS directory found"

          echo "üìã Listing all CSS files in bucket:"
          aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}/assets/ | grep "\.css" || echo "No CSS files found"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ‚ôªÔ∏è Invalidate CloudFront cache
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: '/*'
          AWS_REGION: eu-west-3
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ‚úÖ Deployment success
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Application deployed to S3 with optimized caching and correct MIME types:"
          echo "   üì¶ JavaScript files: application/javascript (1 year cache)"
          echo "   üé® CSS files: text/css (1 year cache)"
          echo "   üñºÔ∏è Assets (fonts/images): appropriate MIME types (1 year cache)"
          echo "   üìÑ HTML files: text/html (5 minutes cache)"
          echo "‚ôªÔ∏è CloudFront cache invalidated"

  # üîÑ JOB 4: Post-deployment verification
  verify-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
    steps:
      - name: üè• Health check
        run: |
          echo "üîç Performing post-deployment checks..."

          # Test basique de connectivit√©
          if curl -f -s -o /dev/null https://wonderbook.net; then
            echo "‚úÖ Site accessible"
          else
            echo "‚ùå Site not accessible"
            exit 1
          fi

      - name: üîç Verify MIME types in production
        run: |
          echo "üîç Testing MIME types in production..."

          # Test d'un fichier CSS r√©cent (pas forc√©ment le nom exact)
          CSS_FILE=$(curl -s https://wonderbook.net/ | grep -o 'assets/index-[^"]*\.css' | head -1)
          if [ -n "$CSS_FILE" ]; then
            CSS_HEADER=$(curl -I -s "https://wonderbook.net/$CSS_FILE" | grep -i content-type || echo "CSS not found")
            echo "üìÑ CSS Content-Type: $CSS_HEADER"
          else
            echo "üìÑ CSS file not found in HTML"
          fi

          # Test d'un fichier JS r√©cent (pas forc√©ment le nom exact)
          JS_FILE=$(curl -s https://wonderbook.net/ | grep -o 'assets/js/index-[^"]*\.js' | head -1)
          if [ -n "$JS_FILE" ]; then
            JS_HEADER=$(curl -I -s "https://wonderbook.net/$JS_FILE" | grep -i content-type || echo "JS not found")
            echo "üì¶ JS Content-Type: $JS_HEADER"
          else
            echo "üì¶ JS file not found in HTML"
          fi

          # Test de l'index.html
          HTML_HEADER=$(curl -I -s https://wonderbook.net/ | grep -i content-type || echo "HTML not found")
          echo "üè† HTML Content-Type: $HTML_HEADER"

          echo "‚úÖ MIME type verification completed!"

      - name: üîç Verify cache headers
        run: |
          echo "üîç Testing cache headers..."

          # Test d'un asset JS
          ASSET_RESPONSE=$(curl -I -s https://wonderbook.net/assets/js/index-D5OH-pp8.js | head -n 20)
          echo "üì¶ Asset headers sample:"
          echo "$ASSET_RESPONSE"

          # Test de l'index.html
          HTML_RESPONSE=$(curl -I -s https://wonderbook.net/ | head -n 20)
          echo "üìÑ HTML headers:"
          echo "$HTML_RESPONSE"

          echo "‚úÖ Post-deployment verification completed!"