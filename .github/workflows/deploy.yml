name: Frontend CI/CD Pipeline
on:
  push:
    branches:
      - main
      - develop
      - prod
  pull_request:
    branches:
      - main
      - prod
jobs:
  # 🧪 JOB 1: Tests and Quality code
  test-and-quality:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
      - name: 📦 Install dependencies
        run: npm ci
      - name: 🔍 Run ESLint
        run: npm run lint
        continue-on-error: false
      - name: 🎨 Check Prettier formatting
        run: npm run format:check
        continue-on-error: true
      - name: 🧪 Run unit tests
        run: npm run test:run
        env:
          CI: true
      - name: 📊 Generate coverage report
        run: npm run test:coverage
        continue-on-error: true
      - name: 🔒 Security audit
        run: npm audit --audit-level moderate
        continue-on-error: true
      - name: 🏗️ Test build
        run: npm run build
        env:
          VITE_RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}
  # 🏗️ JOB 2: Build for deployment
  # Ajoutez ces étapes à votre job "build-for-deploy"

  build-for-deploy:
    needs: test-and-quality
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --only=production --ignore-scripts

      # 🚀 Nouvelle étape: Optimisation des assets avant build
      - name: 🎯 Optimize assets pre-build
        run: |
          echo "🔍 Analyzing bundle size before build..."
          # Installer les outils d'analyse si nécessaire
          npm install --no-save webpack-bundle-analyzer

      - name: 🏗️ Build project with optimizations
        run: |
          echo "🚀 Building with production optimizations..."
          NODE_ENV=production npm run build
        env:
          VITE_RECAPTCHA_SITE_KEY: ${{ secrets.RECAPTCHA_SITE_KEY }}
          # Optimisations build
          GENERATE_SOURCEMAP: false
          INLINE_RUNTIME_CHUNK: false

      # 🔍 Nouvelle étape: Analyse du bundle
      - name: 📊 Analyze bundle size
        run: |
          echo "📊 Bundle analysis:"
          du -sh dist/
          echo "📦 Asset breakdown:"
          find dist/ -name "*.js" -exec du -h {} \; | sort -hr | head -10
          find dist/ -name "*.css" -exec du -h {} \; | sort -hr | head -5
          echo "🖼️ Images breakdown:"
          find dist/ -name "*.webp" -o -name "*.png" -o -name "*.jpg" | xargs du -h | sort -hr | head -10

      # 🗜️ Nouvelle étape: Compression des assets
      - name: 🗜️ Compress assets for better performance
        run: |
          echo "🗜️ Compressing assets..."
          # Installer gzip et brotli
          sudo apt-get update && sudo apt-get install -y gzip brotli

          # Compresser les JS et CSS pour CloudFront
          find dist/ -name "*.js" -exec gzip -k {} \;
          find dist/ -name "*.css" -exec gzip -k {} \;
          find dist/ -name "*.js" -exec brotli -k {} \;
          find dist/ -name "*.css" -exec brotli -k {} \;

          echo "✅ Assets compressed"

      - name: 🔍 Verify build output
        run: |
          ls -la dist/
          test -f dist/index.html || exit 1
          test -d dist/assets || exit 1

          # Vérifications supplémentaires
          echo "🔍 Checking critical files..."
          test -f dist/robots.txt || echo "⚠️ robots.txt missing"
          test -f dist/favicon.ico || echo "⚠️ favicon.ico missing"

          # Vérifier que les assets ont bien des hash
          ls dist/assets/js/ | grep -E '\-[a-f0-9]{8}\.js$' || echo "⚠️ JS files missing hash"
          ls dist/assets/css/ | grep -E '\-[a-f0-9]{8}\.css$' || echo "⚠️ CSS files missing hash"

          echo "✅ Build verification successful"
  # 🚀 JOB 3: Deployment with optimized caching
  deploy:
    needs: build-for-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: 🔍 Verify downloaded artifacts
        run: |
          ls -la dist/
          echo "Assets directory contents:"
          ls -la dist/assets/ || echo "No assets directory found"

      - name: 🚀 Deploy static assets with long cache to S3
        run: |
          echo "🎯 Deploying assets (JS, CSS, images) with 1 year cache..."
          aws s3 sync dist/assets/ s3://${{ secrets.S3_BUCKET_NAME }}/assets/ \
            --cache-control "public, max-age=31536000, immutable" \
            --delete \
            --region eu-west-3
          echo "✅ Assets deployed with long-term cache"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 🚀 Deploy HTML and other files with short cache to S3
        run: |
          echo "📄 Deploying HTML and other files with 5 minutes cache..."
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }}/ \
            --exclude "assets/*" \
            --cache-control "public, max-age=300" \
            --delete \
            --region eu-west-3
          echo "✅ HTML and other files deployed with short-term cache"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 🔍 Verify S3 deployment
        run: |
          echo "🔍 Verifying deployment..."
          aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }}/ --recursive --human-readable --summarize
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ♻️ Invalidate CloudFront cache
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: '/*'
          AWS_REGION: eu-west-3
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ✅ Deployment success
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🌐 Application deployed to S3 with optimized caching:"
          echo "   📦 Assets (JS/CSS/Images): 1 year cache (immutable)"
          echo "   📄 HTML files: 5 minutes cache"
          echo "♻️ CloudFront cache invalidated"

  # 🔄 JOB 4: Post-deployment verification
  verify-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
    steps:
      - name: 🏥 Basic health check
        run: |
          echo "🔍 Performing post-deployment checks..."
          echo "✅ Pipeline completed successfully!"
          # Ajoutez ici vos vérifications post-déploiement
          # curl -f https://votre-domaine.com || exit 1

      - name: 🔍 Verify cache headers (optional)
        run: |
          echo "🔍 Testing cache headers..."
          echo "You can manually verify with:"
          echo "curl -I https://wonderbook.net/assets/[your-asset-file]"
          echo "Expected: cache-control: public, max-age=31536000, immutable"
